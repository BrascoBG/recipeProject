{"version":3,"sources":["components/recipe.module.css","components/recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","ingredients","image","loading","className","style","recipe","toFixed","map","item","alt","img","src","App","useState","content","setContent","food","setFood","search","setSearch","setLoading","useEffect","getData","fetch","then","response","json","data","hits","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","href","rel","items","key","label","ingredientLines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,sB,0MCoBzCC,MAjBf,YAAmE,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACrD,OACE,yBAAKC,UAAWC,IAAMC,QACpB,6BACE,4BAAKH,EAAU,aAAeJ,GAC9B,4BAAKI,EAAU,aAAeH,EAASO,QAAQ,GAA/C,aACA,4BACGN,EAAYO,KAAI,SAACC,GAAD,OACf,4BAAKA,OAGT,yBAAKC,IAAI,SAASN,UAAWC,IAAMM,IAAKC,IAAKV,O,MCqDtCW,MAhEf,WACE,IADa,EAGiBC,mBAAS,IAH1B,mBAGNC,EAHM,KAGGC,EAHH,OAIWF,mBAAS,IAJpB,mBAING,EAJM,KAIAC,EAJA,OAKeJ,mBAAS,IALxB,mBAKNK,EALM,KAKEC,EALF,OAMiBN,oBAAS,GAN1B,mBAMNX,EANM,KAMGkB,EANH,KAQbC,qBAAU,WACRC,MACC,CAACJ,IAEJ,IAAMI,EAAU,WACdF,GAAW,GACXG,MAAM,mCAAD,OACgCP,EADhC,mBAbQ,WAaR,oBAZS,qCAeXQ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUZ,EAAWY,EAAKC,SAClCX,EAAQ,IACRG,GAAW,IAQb,OACE,yBAAKjB,UAAU,WACb,wBAAIA,UAAU,SAAd,0CACA,0BAAM0B,SARM,SAACC,GACfA,EAAEC,iBACFZ,EAAUH,KAON,2BACEgB,YAAY,eACZC,KAAK,OACLC,MAAOlB,EACPmB,SAAU,SAACL,GAAD,OAAOb,EAAQa,EAAEM,OAAOF,UAEpC,4BAAQD,KAAK,UAAb,UACA,uBACEG,OAAO,SACPC,KAAK,wCACLlC,UAAU,OACVmC,IAAI,uBAJN,cASF,yBAAKnC,UAAU,QACZW,EAAQP,KAAI,SAACgC,GAAD,OACX,kBAAC,EAAD,CACEC,IAAKD,EAAMlC,OAAOoC,MAClB3C,MAAOyC,EAAMlC,OAAOoC,MACpB1C,SAAUwC,EAAMlC,OAAON,SACvBC,YAAauC,EAAMlC,OAAOqC,gBAC1BzC,MAAOsC,EAAMlC,OAAOJ,MACpBC,QAASA,UChDDyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8374545.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1wGPk\",\"img\":\"recipe_img__2PWUT\"};","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\nimport \"./fonts/lobster.css\";\r\n\r\nfunction Recipe({ title, calories, ingredients, image, loading }) {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <div>\r\n        <h1>{loading ? \"Loading...\" : title}</h1>\r\n        <h3>{loading ? \"Loading...\" : calories.toFixed(2)} Calories</h3>\r\n        <ul>\r\n          {ingredients.map((item) => (\r\n            <li>{item}</li>\r\n          ))}\r\n        </ul>\r\n        <img alt=\"recipe\" className={style.img} src={image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./components/recipe\";\nimport \"./App.css\";\n\nfunction App() {\n  const API_ID = \"7264b995\";\n  const API_KEY = \"7ba9109375935d876f8d54c312661832\";\n  const [content, setContent] = useState([]);\n  const [food, setFood] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getData();\n  }, [search]);\n\n  const getData = () => {\n    setLoading(true);\n    fetch(\n      `https://api.edamam.com/search?q=${food}&app_id=${API_ID}&app_key=${API_KEY}`\n    )\n      .then((response) => response.json())\n      .then((data) => setContent(data.hits));\n    setFood(\"\");\n    setLoading(false);\n  };\n\n  const getFood = (e) => {\n    e.preventDefault();\n    setSearch(food);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <h2 className=\"title\">Search for any kind of food or a drink</h2>\n      <form onSubmit={getFood}>\n        <input\n          placeholder=\"Type here...\"\n          type=\"text\"\n          value={food}\n          onChange={(e) => setFood(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n        <a\n          target=\"_blank\"\n          href=\"https://github.com/BrascoBG/recipeApp\"\n          className=\"code\"\n          rel=\"noopener noreferrer\"\n        >\n          Code Here\n        </a>\n      </form>\n      <div className=\"flex\">\n        {content.map((items) => (\n          <Recipe\n            key={items.recipe.label}\n            title={items.recipe.label}\n            calories={items.recipe.calories}\n            ingredients={items.recipe.ingredientLines}\n            image={items.recipe.image}\n            loading={loading}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}